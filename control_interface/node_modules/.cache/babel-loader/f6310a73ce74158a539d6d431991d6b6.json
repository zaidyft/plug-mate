{"ast":null,"code":"var _jsxFileName = \"/Users/Work/Desktop/schedule-based/src/Basic.js\";\nimport React, { Component } from \"react\"; //import moment from 'moment'\n//import 'moment/locale/zh-cn';\n\nimport Scheduler, { SchedulerData, ViewTypes } from \"react-big-scheduler\";\nimport DemoData from './Data.js';\nimport withDragDropContext from \"./withDnDContext\";\nimport \"react-big-scheduler/lib/css/style.css\";\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props); //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n\n    this.conflictOccurred = (schedulerData, action, event, type, slotId, slotName, start, end) => {\n      alert(\"Conflict occurred. {action: \".concat(action, \", event: \").concat(event));\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(\"A popup should appear: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      schedulerData.removeEvent(event);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      let newFreshId = 0;\n      schedulerData.events.forEach(item => {\n        if (item.id >= newFreshId) newFreshId = item.id + 1;\n      });\n      let newEvent = {\n        id: newFreshId,\n        title: \"(no name)\",\n        start: start,\n        end: end,\n        resourceId: slotId,\n        bgColor: \"rgb(128, 197, 246)\",\n        showPopover: false\n      };\n      schedulerData.addEvent(newEvent);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      alert(\"A popup should appear: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n      schedulerData.updateEventStart(event, newStart);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      alert(\"A popup should appear: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n      schedulerData.updateEventEnd(event, newEnd);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      alert(\"A popup should appear: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData(\"2017-12-18\", ViewTypes.Day, false, false, {// minuteStep: 15\n    }); // schedulerData.localeMoment.locale('en');\n\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.events);\n\n    this.state = {\n      viewModel: _schedulerData\n    };\n  }\n\n  render() {\n    const viewModel = this.state.viewModel;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Delete\",\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      newEvent: this.newEvent,\n      conflictOccurred: this.conflictOccurred,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default withDragDropContext(Basic);","map":{"version":3,"sources":["/Users/Work/Desktop/schedule-based/src/Basic.js"],"names":["React","Component","Scheduler","SchedulerData","ViewTypes","DemoData","withDragDropContext","Basic","constructor","props","conflictOccurred","schedulerData","action","event","type","slotId","slotName","start","end","alert","eventClicked","id","title","ops1","removeEvent","setState","viewModel","newEvent","item","newFreshId","events","forEach","resourceId","bgColor","showPopover","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","Day","setResources","resources","setEvents","state","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import moment from 'moment'\n//import 'moment/locale/zh-cn';\nimport Scheduler, {\n  SchedulerData,\n  ViewTypes\n} from \"react-big-scheduler\";\nimport DemoData from './Data.js';\nimport withDragDropContext from \"./withDnDContext\";\nimport \"react-big-scheduler/lib/css/style.css\";\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props);\n\n    //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n    let schedulerData = new SchedulerData(\n      \"2017-12-18\",\n      ViewTypes.Day,\n      false,\n      false,\n      {\n        // minuteStep: 15\n      }\n    );\n    // schedulerData.localeMoment.locale('en');\n    schedulerData.setResources(DemoData.resources);\n    schedulerData.setEvents(DemoData.events);\n    this.state = {\n      viewModel: schedulerData\n    };\n    \n  }\n\n  render() {\n    const { viewModel } = this.state;\n    return (\n      <div>\n        <div>\n          <Scheduler\n            schedulerData={viewModel}\n            eventItemClick={this.eventClicked}\n            viewEventClick={this.ops1}\n            viewEventText=\"Delete\"\n            updateEventStart={this.updateEventStart}\n            updateEventEnd={this.updateEventEnd}\n            moveEvent={this.moveEvent}\n            newEvent={this.newEvent}\n            conflictOccurred={this.conflictOccurred}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  conflictOccurred = (schedulerData, action, event, type, slotId, slotName, start, end) => {\n    alert(`Conflict occurred. {action: ${action}, event: ${event}`);\n  }\n\n  eventClicked = (schedulerData, event) => {\n    alert(\n      `A popup should appear: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  ops1 = (schedulerData, event) => {\n    schedulerData.removeEvent(event);\n    this.setState({\n      viewModel: schedulerData\n    })\n  };\n\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n    let newFreshId = 0;\n    schedulerData.events.forEach(item => {\n      if (item.id >= newFreshId) newFreshId = item.id + 1;\n    });\n\n    let newEvent = {\n      id: newFreshId,\n      title: \"(no name)\",\n      start: start,\n      end: end,\n      resourceId: slotId,\n      bgColor: \"rgb(128, 197, 246)\",\n      showPopover: false\n    };\n    schedulerData.addEvent(newEvent);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventStart = (schedulerData, event, newStart) => {\n    alert(\n      `A popup should appear: {id: ${event.id}, title: ${event.title}}`\n    );\n    schedulerData.updateEventStart(event, newStart);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventEnd = (schedulerData, event, newEnd) => {\n    alert(\n      `A popup should appear: {id: ${event.id}, title: ${event.title}}`\n    );\n    schedulerData.updateEventEnd(event, newEnd);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n    alert(\n      `A popup should appear: {id: ${event.id}, title: ${event.title}}`\n    );\n    schedulerData.moveEvent(event, slotId, slotName, start, end);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n}\n\nexport default withDragDropContext(Basic);\n"]},"metadata":{},"sourceType":"module"}