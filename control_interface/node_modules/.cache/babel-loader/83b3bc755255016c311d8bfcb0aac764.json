{"ast":null,"code":"var _jsxFileName = \"/Users/Work/Desktop/schedule-based/src/Basic.js\";\nimport React, { Component } from \"react\"; //import moment from 'moment'\n//import 'moment/locale/zh-cn';\n\nimport Scheduler, { SchedulerData, ViewTypes } from \"react-big-scheduler\";\nimport DemoData from './Data.js';\nimport withDragDropContext from \"./withDnDContext\";\nimport \"react-big-scheduler/lib/css/style.css\";\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props); //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n\n    this.onViewChange = (schedulerData, view) => {\n      schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onSelectDate = (schedulerData, date) => {\n      schedulerData.setDate(date);\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(\"You just clicked an event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      alert(\"You just executed ops1 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops2 = (schedulerData, event) => {\n      alert(\"You just executed ops2 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      let newFreshId = 0;\n      schedulerData.events.forEach(item => {\n        if (item.id >= newFreshId) newFreshId = item.id + 1;\n      });\n      let newEvent = {\n        id: newFreshId,\n        title: \"New event you just created\",\n        start: start,\n        end: end,\n        resourceId: slotId,\n        bgColor: \"purple\"\n      };\n      schedulerData.addEvent(newEvent);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      schedulerData.updateEventStart(event, newStart);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      schedulerData.updateEventEnd(event, newEnd);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData(\"2017-12-18\", ViewTypes.Day, false, false, {// minuteStep: 15\n    }); // schedulerData.localeMoment.locale('en');\n\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.events);\n\n    this.state = {\n      viewModel: _schedulerData\n    };\n  }\n\n  render() {\n    const viewModel = this.state.viewModel;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      prevClick: this.prevClick,\n      nextClick: this.nextClick,\n      onSelectDate: this.onSelectDate,\n      onViewChange: this.onViewChange,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Ops 1\",\n      viewEvent2Text: \"Ops 2\",\n      viewEvent2Click: this.ops2,\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      newEvent: this.newEvent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default withDragDropContext(Basic);","map":{"version":3,"sources":["/Users/Work/Desktop/schedule-based/src/Basic.js"],"names":["React","Component","Scheduler","SchedulerData","ViewTypes","DemoData","withDragDropContext","Basic","constructor","props","onViewChange","schedulerData","view","setViewType","viewType","showAgenda","isEventPerspective","setEvents","events","setState","viewModel","onSelectDate","date","setDate","eventClicked","event","alert","id","title","ops1","ops2","newEvent","slotId","slotName","start","end","type","item","newFreshId","forEach","resourceId","bgColor","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","Day","setResources","resources","state","render","prevClick","nextClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import moment from 'moment'\n//import 'moment/locale/zh-cn';\nimport Scheduler, {\n  SchedulerData,\n  ViewTypes\n} from \"react-big-scheduler\";\nimport DemoData from './Data.js';\nimport withDragDropContext from \"./withDnDContext\";\nimport \"react-big-scheduler/lib/css/style.css\";\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props);\n\n    //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n    let schedulerData = new SchedulerData(\n      \"2017-12-18\",\n      ViewTypes.Day,\n      false,\n      false,\n      {\n        // minuteStep: 15\n      }\n    );\n    // schedulerData.localeMoment.locale('en');\n    schedulerData.setResources(DemoData.resources);\n    schedulerData.setEvents(DemoData.events);\n    this.state = {\n      viewModel: schedulerData\n    };\n  }\n\n  render() {\n    const { viewModel } = this.state;\n    return (\n      <div>\n        <div>\n          <Scheduler\n            schedulerData={viewModel}\n            prevClick={this.prevClick}\n            nextClick={this.nextClick}\n            onSelectDate={this.onSelectDate}\n            onViewChange={this.onViewChange}\n            eventItemClick={this.eventClicked}\n            viewEventClick={this.ops1}\n            viewEventText=\"Ops 1\"\n            viewEvent2Text=\"Ops 2\"\n            viewEvent2Click={this.ops2}\n            updateEventStart={this.updateEventStart}\n            updateEventEnd={this.updateEventEnd}\n            moveEvent={this.moveEvent}\n            newEvent={this.newEvent}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onViewChange = (schedulerData, view) => {\n    schedulerData.setViewType(\n      view.viewType,\n      view.showAgenda,\n      view.isEventPerspective\n    );\n    schedulerData.setEvents(DemoData.events);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  onSelectDate = (schedulerData, date) => {\n    schedulerData.setDate(date);\n    schedulerData.setEvents(DemoData.events);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  eventClicked = (schedulerData, event) => {\n    alert(\n      `You just clicked an event: {id: ${event.id}, title: ${event.title}}`\n    );\n  };\n\n  ops1 = (schedulerData, event) => {\n    alert(\n      `You just executed ops1 to event: {id: ${event.id}, title: ${\n        event.title\n      }}`\n    );\n  };\n\n  ops2 = (schedulerData, event) => {\n    alert(\n      `You just executed ops2 to event: {id: ${event.id}, title: ${\n        event.title\n      }}`\n    );\n  };\n\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n    let newFreshId = 0;\n    schedulerData.events.forEach(item => {\n      if (item.id >= newFreshId) newFreshId = item.id + 1;\n    });\n\n    let newEvent = {\n      id: newFreshId,\n      title: \"New event you just created\",\n      start: start,\n      end: end,\n      resourceId: slotId,\n      bgColor: \"purple\"\n    };\n    schedulerData.addEvent(newEvent);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventStart = (schedulerData, event, newStart) => {\n    schedulerData.updateEventStart(event, newStart);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventEnd = (schedulerData, event, newEnd) => {\n    schedulerData.updateEventEnd(event, newEnd);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n    schedulerData.moveEvent(event, slotId, slotName, start, end);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n}\n\nexport default withDragDropContext(Basic);\n"]},"metadata":{},"sourceType":"module"}