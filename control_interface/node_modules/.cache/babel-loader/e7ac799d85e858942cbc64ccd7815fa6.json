{"ast":null,"code":"var _jsxFileName = \"/Users/Work/Desktop/schedule-based/src/Basic.js\";\nimport React, { Component } from \"react\"; //import moment from 'moment'\n//import 'moment/locale/zh-cn';\n\nimport Scheduler, { SchedulerData, ViewTypes } from \"react-big-scheduler\";\nimport DemoData from './Data.js';\nimport withDragDropContext from \"./withDnDContext\";\nimport \"react-big-scheduler/lib/css/style.css\";\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props); //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n\n    this.eventClicked = (schedulerData, event) => {\n      function okButtonClicked() {\n        // Update schedule name\n        var schedule = document.getElementById(\"schedule_name\").value;\n        event.title = schedule; // Update start time\n\n        var start = document.getElementById(\"start\").value;\n\n        if (start.length === 7) {\n          start = \"0\" + start;\n        }\n\n        if (start.includes(\"AM\")) {\n          start = \"2017-12-18 \" + start.substring(0, 5) + \":00\";\n        } else {\n          start = \"2017-12-18 \" + (Number(start.substring(0, 2)) + 12).toString() + start.substring(2, 5) + \":00\";\n        }\n\n        schedulerData.updateEventStart(event, start); // Update end time\n\n        var end = document.getElementById(\"end\").value;\n\n        if (end.length === 7) {\n          end = \"0\" + end;\n        }\n\n        if (end.includes(\"AM\")) {\n          end = \"2017-12-18 \" + end.substring(0, 5) + \":00\";\n        } else {\n          end = \"2017-12-18 \" + (Number(end.substring(0, 2)) + 12).toString() + end.substring(2, 5) + \":00\";\n        }\n\n        schedulerData.updateEventEnd(event, end); // Update displayed calendar\n\n        window.calendar.setState({\n          viewModel: schedulerData\n        }); // Remove popup\n\n        ReactDOM.unmountComponentAtNode(document.getElementById(\"popup-container\"));\n      }\n\n      function deleteButtonClicked() {\n        schedulerData.removeEvent(event);\n        window.calendar.setState({\n          viewModel: schedulerData\n        });\n        ReactDOM.unmountComponentAtNode(document.getElementById(\"popup-container\"));\n      }\n\n      render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        id: \"schedule_name\",\n        type: \"text\",\n        name: \"title\",\n        defaultValue: event.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Timepicker, {\n        defaultStart: moment(event.start),\n        defaultEnd: moment(event.end),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        name: \"Repeat:\",\n        day: \"Monday\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Checkbox, {\n        name: \"Plug Loads\",\n        option1: \"Monitor\",\n        option2: \"Laptop\",\n        option3: \"Task Lamp\",\n        option4: \"Fan\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: deleteButtonClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, \" Delete \"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: okButtonClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, \" OK \"))), document.getElementById(\"popup-container\"));\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      schedulerData.removeEvent(event);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      let newFreshId = 0;\n      schedulerData.events.forEach(item => {\n        if (item.id >= newFreshId) newFreshId = item.id + 1;\n      });\n      let newEvent = {\n        id: newFreshId,\n        title: \"(no name)\",\n        start: start,\n        end: end,\n        resourceId: slotId,\n        bgColor: \"rgb(128, 197, 246)\",\n        showPopover: false\n      };\n      schedulerData.addEvent(newEvent);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      alert(\"A popup should appear: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n      schedulerData.updateEventStart(event, newStart);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      alert(\"A popup should appear: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n      schedulerData.updateEventEnd(event, newEnd);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      alert(\"A popup should appear: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    let _schedulerData = new SchedulerData(\"2017-12-18\", ViewTypes.Day, false, false, {// minuteStep: 15\n    }); // schedulerData.localeMoment.locale('en');\n\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.events);\n\n    this.state = {\n      viewModel: _schedulerData\n    };\n    window.mondayCalendar = this;\n  }\n\n  render() {\n    const viewModel = this.state.viewModel;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Delete\",\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      newEvent: this.newEvent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default withDragDropContext(Basic);","map":{"version":3,"sources":["/Users/Work/Desktop/schedule-based/src/Basic.js"],"names":["React","Component","Scheduler","SchedulerData","ViewTypes","DemoData","withDragDropContext","Basic","constructor","props","eventClicked","schedulerData","event","okButtonClicked","schedule","document","getElementById","value","title","start","length","includes","substring","Number","toString","updateEventStart","end","updateEventEnd","window","calendar","setState","viewModel","ReactDOM","unmountComponentAtNode","deleteButtonClicked","removeEvent","render","moment","ops1","newEvent","slotId","slotName","type","item","newFreshId","events","forEach","id","resourceId","bgColor","showPopover","addEvent","newStart","alert","newEnd","moveEvent","Day","setResources","resources","setEvents","state","mondayCalendar"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import moment from 'moment'\n//import 'moment/locale/zh-cn';\nimport Scheduler, {\n  SchedulerData,\n  ViewTypes\n} from \"react-big-scheduler\";\nimport DemoData from './Data.js';\nimport withDragDropContext from \"./withDnDContext\";\nimport \"react-big-scheduler/lib/css/style.css\";\n\nclass Basic extends Component {\n  constructor(props) {\n    super(props);\n\n    //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n    let schedulerData = new SchedulerData(\n      \"2017-12-18\",\n      ViewTypes.Day,\n      false,\n      false,\n      {\n        // minuteStep: 15\n      }\n    );\n    // schedulerData.localeMoment.locale('en');\n    schedulerData.setResources(DemoData.resources);\n    schedulerData.setEvents(DemoData.events);\n    this.state = {\n      viewModel: schedulerData\n    };\n    window.mondayCalendar = this\n  }\n\n  render() {\n    const { viewModel } = this.state;\n    return (\n      <div>\n        <div>\n          <Scheduler\n            schedulerData={viewModel}\n            eventItemClick={this.eventClicked}\n            viewEventClick={this.ops1}\n            viewEventText=\"Delete\"\n            updateEventStart={this.updateEventStart}\n            updateEventEnd={this.updateEventEnd}\n            moveEvent={this.moveEvent}\n            newEvent={this.newEvent}\n          />\n        </div>\n      </div>\n    );\n  }\n\n\n  eventClicked = (schedulerData, event) => {\n    function okButtonClicked() {\n      // Update schedule name\n      var schedule = document.getElementById(\"schedule_name\").value;\n      event.title = schedule;\n\n      // Update start time\n      var start = document.getElementById(\"start\").value;\n      if (start.length === 7) {\n        start = \"0\" + start;\n      }\n      if (start.includes(\"AM\")) {\n        start = \"2017-12-18 \" + start.substring(0, 5) + \":00\"\n      } else {\n        start = \"2017-12-18 \" + (Number(start.substring(0, 2)) + 12).toString() + start.substring(2, 5) + \":00\"\n      }\n      schedulerData.updateEventStart(event, start);\n\n      // Update end time\n      var end = document.getElementById(\"end\").value;\n      if (end.length === 7) {\n        end = \"0\" + end;\n      }\n      if (end.includes(\"AM\")) {\n        end = \"2017-12-18 \" + end.substring(0, 5) + \":00\"\n      } else {\n        end = \"2017-12-18 \" + (Number(end.substring(0, 2)) + 12).toString() + end.substring(2, 5) + \":00\"\n      }\n      schedulerData.updateEventEnd(event, end);\n\n\n      // Update displayed calendar\n      window.calendar.setState({\n        viewModel: schedulerData\n      })\n\n      // Remove popup\n      ReactDOM.unmountComponentAtNode(document.getElementById(\"popup-container\"));\n    }\n\n    function deleteButtonClicked() {\n      schedulerData.removeEvent(event)\n      window.calendar.setState({\n        viewModel: schedulerData\n      })\n      ReactDOM.unmountComponentAtNode(document.getElementById(\"popup-container\"));\n    }\n\n    render(<>\n              <div className=\"container\">\n                <input id=\"schedule_name\" type=\"text\" name=\"title\" defaultValue={event.title} />\n                <Timepicker defaultStart={moment(event.start)} defaultEnd={moment(event.end)} />\n                <Radio name=\"Repeat:\" day=\"Monday\" />\n                <Checkbox\n                  name=\"Plug Loads\"\n                  option1=\"Monitor\"\n                  option2=\"Laptop\"\n                  option3=\"Task Lamp\"\n                  option4=\"Fan\"\n                />\n                <br />\n                <br />\n                <button onClick={deleteButtonClicked}> Delete </button>\n                <button onClick={okButtonClicked}> OK </button>\n              </div>\n          </>, document.getElementById(\"popup-container\"));\n  };\n\n  ops1 = (schedulerData, event) => {\n    schedulerData.removeEvent(event);\n    this.setState({\n      viewModel: schedulerData\n    })\n  };\n\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n    let newFreshId = 0;\n    schedulerData.events.forEach(item => {\n      if (item.id >= newFreshId) newFreshId = item.id + 1;\n    });\n\n    let newEvent = {\n      id: newFreshId,\n      title: \"(no name)\",\n      start: start,\n      end: end,\n      resourceId: slotId,\n      bgColor: \"rgb(128, 197, 246)\",\n      showPopover: false\n    };\n    schedulerData.addEvent(newEvent);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventStart = (schedulerData, event, newStart) => {\n    alert(\n      `A popup should appear: {id: ${event.id}, title: ${event.title}}`\n    );\n    schedulerData.updateEventStart(event, newStart);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  updateEventEnd = (schedulerData, event, newEnd) => {\n    alert(\n      `A popup should appear: {id: ${event.id}, title: ${event.title}}`\n    );\n    schedulerData.updateEventEnd(event, newEnd);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n    alert(\n      `A popup should appear: {id: ${event.id}, title: ${event.title}}`\n    );\n    schedulerData.moveEvent(event, slotId, slotName, start, end);\n    this.setState({\n      viewModel: schedulerData\n    });\n  };\n}\n\nexport default withDragDropContext(Basic);\n"]},"metadata":{},"sourceType":"module"}